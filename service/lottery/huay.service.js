const huay = require("../../models/huay.model");
const LotterySets = require("../../models/lotterySets.model");
const UserBet = require("../../models/userBetSchema.models");

exports.create = async (data, lottery_set_id) => {
  try {
    const set = await LotterySets.findById(lottery_set_id);
    if (!set) {
      throw new Error("Invalid lottery_set_id : set not found.");
    }

    let result;

    if (Array.isArray(data)) {
      result = await huay.insertMany(data);
    } else {
      result = await huay.create(data);
    }

    return {
      message: "Huay data inserted successfully",
      content: result,
    };
  } catch (error) {
    console.error("Failed to insert Huay data:", error.message);
    throw new Error("Error inserting Huay data: " + error.message);
  }
};

exports.getHuay = async (lotteryItemId) => {
  try {
    if (!lotteryItemId) {
      throw new Error("lotteryItemId is required.");
    }

    const huayData = await huay.find({ lottery_item_id: lotteryItemId });
    return huayData;
  } catch (error) {
    console.error("Failed to retrieve Huay data:", error.message);
    throw new Error("Error retrieving Huay data: " + error.message);
  }
};

exports.getHuayById = async (huayId) => {
  try {
    const huayData = await huay.findById(huayId);
    if (!huayData) {
      throw new Error("Huay data not found.");
    }
    return huayData;
  } catch (error) {
    console.error("Failed to retrieve Huay data by ID:", error.message);
    throw new Error("Error retrieving Huay data by ID: " + error.message);
  }
};

exports.updateHuay = async (huayId, data) => {
  try {
    const updatedHuay = await huay.findByIdAndUpdate(huayId, data, {
      new: true,
    });
    return updatedHuay;
  } catch (error) {
    console.error("Failed to update Huay data:", error.message);
    throw new Error("Error updating Huay data: " + error.message);
  }
};

exports.evaluateUserBetsByLotterySet = async function (lottery_set_id) {
  try {
    if (!lottery_set_id) {
      throw new Error("‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ lottery_set_id");
    }

    // 1. ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÄ‡∏•‡∏Ç‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ
    const huayResults = await huay.find({ lottery_set_id });

    if (!huayResults || huayResults.length === 0) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ");
    }

    const winningNumbers = huayResults.flatMap((h) => h.huay_number || []);
    console.log(`üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏ß‡∏î: ${lottery_set_id}`);
    console.log(`üèÜ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏£‡∏ß‡∏°: ${JSON.stringify(winningNumbers)}`);

    // 2. ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏£‡∏ß‡∏à
    const pendingBets = await UserBet.find({
      lottery_set_id,
      status: "pending",
    });

    console.log(`üì¶ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à: ${pendingBets.length} ‡∏Ñ‡∏ô`);

    const updatedBets = [];

    for (const userBet of pendingBets) {
      let hasWon = false;
      let payoutAmount = 0;

      console.log(`üë§ ‡∏ï‡∏£‡∏ß‡∏à user: ${userBet.user_id}`);

      for (const bet of userBet.bets) {
        for (const numObj of bet.numbers) {
          const userNumber = numObj.number;
          const amount = numObj.amount;
          const rate = bet.payout_rate;

          const isWin = winningNumbers.includes(userNumber);

          console.log(
            `‚û°Ô∏è ‡πÅ‡∏ó‡∏á‡πÄ‡∏•‡∏Ç: ${userNumber}, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${amount}, ‡∏≠‡∏±‡∏ï‡∏£‡∏≤: ${rate} | ${
              isWin ? "‚úÖ ‡∏ñ‡∏π‡∏Å" : "‚ùå ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å"
            }`
          );

          if (isWin) {
            hasWon = true;
            payoutAmount += amount * rate;
          }
        }
      }

      userBet.status = hasWon ? "won" : "lost";
      userBet.payout_amount = payoutAmount;
      userBet.updated_at = new Date();
      await userBet.save();

      console.log(
        `üéØ ‡∏ú‡∏•: ${userBet.status.toUpperCase()}, ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô: ${payoutAmount}`
      );

      updatedBets.push(userBet);
    }

    console.log(`\n‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${updatedBets.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    return updatedBets;
  } catch (error) {
    console.error("‚ùå evaluateUserBetsByLotterySet error:", error.message);
    throw error;
  }
};
